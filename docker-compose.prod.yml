services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-eipr}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-eipr}"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  redis:
    image: redis:7
    command: ["redis-server", "--save", ""]
    volumes:
      - redis_data:/data
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    env_file:
      - .env
    environment:
      APP_ENV: production
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-eipr}
      SYNC_DATABASE_URL: postgresql+psycopg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-eipr}
      REDIS_URL: redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/api/v1/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  portal:
    build:
      context: .
      dockerfile: portal/Dockerfile.prod
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped

  caddy:
    image: caddy:2-alpine
    ports:
      - "8080:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      api:
        condition: service_started
      portal:
        condition: service_started
    restart: unless-stopped

  backups:
    image: postgres:15
    depends_on:
      db:
        condition: service_started
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - pg_backups:/backups
    entrypoint: ["sh", "-c"]
    command: >-
      mkdir -p /backups &&
      while true; do
        pg_dump -h db -U ${POSTGRES_USER:-postgres} ${POSTGRES_DB:-eipr} > /backups/$(date +%F).sql &&
        ls -1 /backups | sort | head -n -7 | xargs -r -I{} rm /backups/{} ;
        sleep 86400;
      done
    restart: unless-stopped

volumes:
  db_data:
  redis_data:
  pg_backups:
